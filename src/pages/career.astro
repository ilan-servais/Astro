---
import Layout from '@layouts/Layout.astro';
import TimelineExperience from '@components/TimelineExperience.astro';
import timelineData from '../data/timeline.json';
import BackToTop from '@components/ui/BackToTop.astro';

// Tri des expériences par année du plus récent au plus ancien
const sortedExperiences = [...timelineData.experiences].sort((a, b) => {
  const extractYear = (yearStr) => {
    if (typeof yearStr === 'string') {
      const match = yearStr.match(/^\d{4}/);
      return match ? parseInt(match[0]) : 0;
    }
    return yearStr;
  };
  
  return extractYear(b.year) - extractYear(a.year);
});

// Récupérer l'ID de l'URL hash côté serveur si possible
const initialId = Astro.url.hash ? Astro.url.hash.substring(1) : "1";
---

<Layout title="Career path | Ilan Servais">
  <main class="mx-auto max-w-4xl px-4">
    <div class="text-center py-8">
      <h1 class="font-monospace text-3xl text-orange mb-6">My Career Path</h1>
    </div>

    <div class="space-y-12 pb-20">
      {sortedExperiences.map((exp) => (
        <div 
          id={exp.id.toString()} 
          class={`card-container group relative ${exp.id.toString() === initialId ? 'active' : ''}`} 
          data-exp-id={exp.id}
        >
          <TimelineExperience 
            id={exp.id}
            year={exp.year}
            company={exp.company}
            title={exp.title}
            description={exp.description}
            iconPath={exp.iconPath}
            city={exp.city}
          />
        </div>
      ))}
    </div>
    
    <div class="fixed bottom-5 right-5 z-50">
      <BackToTop />
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let userInteracting = false;
    let initialLoad = true;
    
    // Fonction d'activation des cartes améliorée
    function activateCard(id, scroll = false) {
      // Validation de l'id pour éviter les erreurs
      if (!id) return;

      console.log(`Activating card: ${id}`); // Pour le débogage

      // Convertir en chaîne si ce n'est pas déjà le cas
      const cardId = id.toString();
      
      // Désactiver toutes les cartes
      document.querySelectorAll('.card-container').forEach(card => {
        card.classList.remove('active');
      });
      
      // Activer la carte cible
      const targetCard = document.getElementById(cardId);
      if (targetCard) {
        targetCard.classList.add('active');
        
        // Mettre à jour l'URL sans rechargement
        if (history.replaceState) {
          history.replaceState(null, null, `#${cardId}`);
        }
        
        // Défiler si nécessaire
        if (scroll) {
          userInteracting = true;
          
          // Positionnement spécifique selon l'ID
          if (cardId === '1') {
            window.scrollTo({ top: 0, behavior: 'smooth' });
          } else if (cardId === '15') {
            // Pour la dernière carte, faire défiler vers le bas de la page
            window.scrollTo({ 
              top: document.body.scrollHeight - window.innerHeight,
              behavior: 'smooth'
            });
          } else {
            targetCard.scrollIntoView({
              behavior: 'smooth',
              block: 'center'
            });
          }
          
          setTimeout(() => { userInteracting = false; }, 1000);
        }
      } else {
        console.error(`Card with ID ${cardId} not found`);
      }
    }
    
    // Adaptation pour garantir que le hash est traité à la fin du chargement
    function processInitialHash() {
      // Désactiver temporairement l'observer pour éviter les conflits
      userInteracting = true;
      initialLoad = true;
      
      // Récupérer le hash et retirer le caractère '#'
      const hash = window.location.hash ? window.location.hash.substring(1) : null;
      
      if (hash) {
        console.log(`Processing hash: ${hash}`);
        
        // Vérifier si l'élément avec cet id existe
        if (document.getElementById(hash)) {
          // Attendre que toutes les ressources soient chargées
          window.requestAnimationFrame(() => {
            // Double requestAnimationFrame pour s'assurer que le DOM est prêt
            window.requestAnimationFrame(() => {
              activateCard(hash, true);
              
              // Réactiver l'observer après un délai suffisant
              setTimeout(() => {
                userInteracting = false;
                initialLoad = false;
              }, 1500);
            });
          });
        } else {
          console.error(`Element with ID ${hash} not found`);
          activateCard('1', false);
          initialLoad = false;
          userInteracting = false;
        }
      } else {
        activateCard('1', false);
        initialLoad = false;
        userInteracting = false;
      }
    }
    
    // Traiter le hash initial après chargement complet
    if (document.readyState === 'complete') {
      processInitialHash();
    } else {
      window.addEventListener('load', processInitialHash);
    }
    
    // Ajout d'une détection spécifique pour les extrémités de la page
    function checkExtremePositions() {
      if (userInteracting || initialLoad) return;

      // Détection pour la première carte
      if (window.scrollY < 100) {
        activateCard('1', false);
        return;
      }
      
      // Détection pour la dernière carte
      const nearBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight - 150;
      if (nearBottom) {
        activateCard('15', false);
        return;
      }
    }
    
    // Observer de visibilité amélioré
    const observer = new IntersectionObserver(entries => {
      // Ne pas traiter pendant une interaction utilisateur ou au chargement initial
      if (userInteracting || initialLoad) return;
      
      // Vérifier d'abord les positions extrêmes
      checkExtremePositions();
      
      // Poursuivre le traitement normal pour les autres cartes
      const visibleEntries = entries.filter(entry => entry.isIntersecting);
      if (!visibleEntries.length) return;
      
      // Obtenir toutes les cartes et leurs positions
      const cards = Array.from(document.querySelectorAll('.card-container'));
      const cardPositions = cards.map(card => {
        const rect = card.getBoundingClientRect();
        const cardId = card.getAttribute('id');
        
        // Score de visibilité plus élevé pour les cartes extrêmes
        let centerScore = 1 - Math.abs(0.5 - ((rect.top + rect.bottom) / 2 / window.innerHeight));
        
        // Bonus pour les cartes 1 et 15 pour faciliter leur activation
        if (cardId === '1' || cardId === '15') {
          centerScore *= 1.2; // Bonus de 20%
        }
        
        return { id: cardId, centerScore };
      });
      
      // Trier par score de visibilité
      cardPositions.sort((a, b) => b.centerScore - a.centerScore);
      
      // Activer la carte la plus visible si son score est suffisant
      if (cardPositions.length && cardPositions[0].centerScore > 0.25) {
        activateCard(cardPositions[0].id, false);
      }
    }, {
      rootMargin: "-5% 0px -5% 0px",
      threshold: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]
    });
    
    // Observer toutes les cartes
    document.querySelectorAll('.card-container').forEach(card => {
      observer.observe(card);
    });
    
    // Ajouter un écouteur pour le défilement pour les positions extrêmes
    window.addEventListener('scroll', () => {
      if (!userInteracting && !initialLoad) {
        checkExtremePositions();
      }
    }, { passive: true });
    
    // Écouteur pour les changements de hash pendant la navigation
    window.addEventListener('hashchange', (event) => {
      const newHash = window.location.hash.substring(1);
      if (newHash && document.getElementById(newHash)) {
        userInteracting = true;
        activateCard(newHash, true);
        setTimeout(() => { userInteracting = false; }, 1000);
      }
    });
    
    // Gestion des boutons de partage
    document.addEventListener('click', e => {
      const shareButton = e.target.closest('.share-button');
      if (!shareButton) return;
      
      const id = shareButton.dataset.id;
      if (id) {
        userInteracting = true;
        
        // Copier le lien
        const url = `${window.location.origin}/career#${id}`;
        navigator.clipboard.writeText(url).then(() => {
          const notification = document.getElementById('copy-notification');
          if (notification) {
            notification.classList.add('show');
            setTimeout(() => notification.classList.remove('show'), 2000);
          }
        });
        
        setTimeout(() => { userInteracting = false; }, 500);
      }
    });
  });
</script>

<style>
  /* Styles simplifiés pour une animation plus fluide */
  .card-container {
    position: relative;
    scroll-margin: 80px;
    transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    overflow: hidden; /* Pour s'assurer que le pseudo-élément ne déborde pas */
    border-radius: 0.75rem; /* Correspondant à rounded-xl de TailwindCSS */
  }
  
  /* Styles spécifiques pour la première et la dernière carte */
  .card-container[data-exp-id="1"] {
    scroll-margin-top: 120px;
  }
  
  .card-container[data-exp-id="15"] {  /* Mise à jour pour l'ID 15 */
    scroll-margin-bottom: 120px;
  }
  
  /* Utilisation d'un pseudo-élément pour créer une bordure arrondie */
  .card-container.active {
    position: relative;
    transform: scale(1.01);
    transform-origin: left center;
    box-shadow: 0 10px 20px rgba(0,0,0,0.08);
    border-left: none; /* Suppression de la bordure directe */
  }
  
  .card-container.active::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background-color: #E06330;
    border-top-left-radius: 0.75rem;
    border-bottom-left-radius: 0.75rem;
    z-index: 1;
  }
  
  /* Reste des styles inchangé */
  .timeline-experience {
    transition: transform 0.3s ease;
    transform-origin: left center;
    width: 100%;
    border-radius: 0.75rem; /* Ajouter le même rayon de courbure */
  }
  
  .timeline-experience > * {
    transform: translateZ(0);
    backface-visibility: hidden;
  }
  
  .copy-notification {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    z-index: 1000;
    animation: fadeInOut 2s ease;
  }
  
  @keyframes fadeInOut {
    0% { opacity: 0; }
    20% { opacity: 1; }
    80% { opacity: 1; }
    100% { opacity: 0; }
  }
</style>
