---
import Layout from '@layouts/Layout.astro';
import TimelineExperience from '@components/TimelineExperience.astro';
import timelineData from '../data/timeline.json';
import BackToTop from '@components/ui/BackToTop.astro';

// Tri des expériences par année du plus récent au plus ancien
const sortedExperiences = [...timelineData.experiences].sort((a, b) => {
  const extractYear = (yearStr) => {
    if (typeof yearStr === 'string') {
      const match = yearStr.match(/^\d{4}/);
      return match ? parseInt(match[0]) : 0;
    }
    return yearStr;
  };
  
  return extractYear(b.year) - extractYear(a.year);
});
---

<Layout title="Ilan Servais | Professional Journey">
  <main class="mx-auto max-w-4xl px-4">
    <div class="text-center py-8">
      <h1 class="font-monospace text-3xl text-orange mb-6">My Career Path</h1>
    </div>

    <div class="space-y-12 pb-20">
      {sortedExperiences.map((exp) => (
        <div id={exp.id.toString()} class="card-container group relative">
          <!-- Lien d'ancre visible au survol -->
          <a 
            href={`/career#${exp.id}`} 
            class="absolute -left-8 top-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity"
            aria-label={`Lien vers ${exp.company}`}
            title="Copier le lien vers cette expérience"
            onclick="navigator.clipboard.writeText(window.location.origin + '/career#' + ${exp.id}); return false;"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-orange">
              <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
              <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
            </svg>
          </a>
          <TimelineExperience 
            id={exp.id}
            year={exp.year}
            company={exp.company}
            title={exp.title}
            description={exp.description}
            iconPath={exp.iconPath}
          />
        </div>
      ))}
    </div>
    
    <div class="fixed bottom-5 right-5 z-50">
      <BackToTop />
    </div>
  </main>
</Layout>

<script>
  // Handle hash navigation
  document.addEventListener('DOMContentLoaded', () => {
    // Si l'URL contient un hash (ex: #5)
    if (window.location.hash) {
      const id = window.location.hash.substring(1);
      const element = document.getElementById(id);
      
      if (element) {
        // Ajouter une classe active et faire défiler
        element.classList.add('active');
        setTimeout(() => {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 300);
      }
    }
    
    // Ajouter un message de confirmation lors de la copie d'un lien
    document.querySelectorAll('.card-container a').forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const id = this.closest('.card-container').id;
        const url = window.location.origin + '/career#' + id;
        
        // Copier l'URL dans le presse-papier
        navigator.clipboard.writeText(url)
          .then(() => {
            // Créer une notification temporaire
            const notification = document.createElement('div');
            notification.textContent = 'Lien copié !';
            notification.className = 'copy-notification';
            document.body.appendChild(notification);
            
            // Supprimer la notification après 2 secondes
            setTimeout(() => {
              notification.remove();
            }, 2000);
          });
      });
    });
  });
</script>

<style>
  .card-container {
    transition: all 0.3s ease;
    scroll-margin-top: 4rem;
  }
  
  .card-container:hover {
    transform: translateX(5px);
  }
  
  .card-container.active {
    border-left: 4px solid #E06330;
    padding-left: 1rem;
  }
  
  /* Style pour la notification de copie */
  .copy-notification {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    z-index: 1000;
    animation: fadeInOut 2s ease;
  }
  
  @keyframes fadeInOut {
    0% { opacity: 0; }
    20% { opacity: 1; }
    80% { opacity: 1; }
    100% { opacity: 0; }
  }
</style>
